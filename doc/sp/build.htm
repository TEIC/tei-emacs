<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML Strict//EN">
<HTML>
<HEAD>
<TITLE>Building SP</TITLE>
</HEAD>
<BODY>
<H1>Building SP</H1>
<P>
You will need a C++ compiler with good template support to build this.
Support for exceptions is not required.
<P>
In most cases you should be able to port to a new compiler just by
editing <code>include/config.h</code>.

<H2>Unix</H2>
<P>
To build on Unix, edit the Makefile, and do a make.  You can also
build in a different directory.  This requires GNU make or another
make that implements VPATH.  Copy or link the top-level Makefile to
the build directory, change srcdir in the Makefile to point to the
original directory, and do a make in the build directory.
<P>
<SAMP>make install</SAMP> installs the programs.
<P>
You can use the following compilers:
<DL>
<DT>
gcc
<DD>
gcc 2.95.1 works.
<P>
With gcc 2.6.3/SunOS 4, you'll need to compile with
<CODE>-Dsig_atomic_t=int</CODE>, and, if you want to compile with
-DSP_HAVE_SOCKET, you'll need to make netdb.h and arpa/inet.h C++
compatible.
<DT>
Sun C++
<DD>
To compile with Sun C++ 4.0.1, run first sunfix.sh.  Also in the
top-level Makefile, change set libMakefile to Makefile.lib.sun.
This makes the library build use the -xar option.
</DL>
<P>
Nelson Beebe has ported SP to a variety of other Unix systems and has
produced some <A
HREF="http://www.math.utah.edu/~beebe/sp-notes-1.0.1.html">notes</A>
about his experiences.

<H2>Windows</H2>
<P>
The following compilers have been tested:
<DL>
<DT>
Visual C++ 6.0
<DD>
Make sure the msdev directory is in your path, by using a command
similar to:
<pre>
path c:\Program Files\Microsoft Visual Studio\Common\MSDev98\Bin;%path%
</pre>
Then build SP using the command
<pre>
msdev SP.dsw /make "all - release" /norecurse
</pre>
</DL>
<P>
<ADDRESS>
James Clark<BR>
jjc@jclark.com
</ADDRESS>
</BODY>
</HTML>
